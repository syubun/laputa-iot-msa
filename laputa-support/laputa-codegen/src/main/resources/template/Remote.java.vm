/*
 *    Copyright (c) 2018-2025, Laputa IOT All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 * Neither the name of the www.laputa-iot.com developer nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 * Author: SommerJiang (sommer_jiang@163.com)
 */

package ${package}.${moduleName}.api.remote;


import ${package}.${moduleName}.api.entity.${className};
import com.laputa.iot.common.core.constant.ServiceNameConstants;
import com.laputa.iot.common.core.base.dto.R;
import org.springframework.cloud.openfeign.FeignClient;
import org.springframework.web.bind.annotation.*;

/**
 * ${comments}
 *
 * @author ${author}
 * @date ${datetime}
 */
@FeignClient(contextId = "${className}RemoteService", value = ServiceNameConstants.${moduleName}_SERVICE)
public interface ${className}RemoteService {




    /**
     * 通过id查询${comments}
     * @param ${pk.lowerAttrName} id
     * @return R
     */

    @GetMapping("/${pathName}/{${pk.lowerAttrName}}" )
    R getById(@PathVariable("${pk.lowerAttrName}" ) ${pk.attrType} ${pk.lowerAttrName});

    /**
     * 新增${comments}
     * @param ${classname} ${comments}
     * @return R
     */

    @PostMapping("/${pathName}")
    R save(@RequestBody ${className} ${classname});

    /**
     * 修改${comments}
     * @param ${classname} ${comments}
     * @return R
     */

    @PutMapping("/${pathName}")
     R updateById(@RequestBody ${className} ${classname});

    /**
     * 通过id删除${comments}
     * @param ${pk.lowerAttrName} id
     * @return R
     */

    @DeleteMapping("/${pathName}/{${pk.lowerAttrName}}" )
    R removeById(@PathVariable ${pk.attrType} ${pk.lowerAttrName});
}
